package com.mtcn.androidroomkotlin.ui.fragments.home

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.gkemon.XMLtoPDF.PdfGenerator
import com.gkemon.XMLtoPDF.PdfGeneratorListener
import com.gkemon.XMLtoPDF.model.FailureResponse
import com.gkemon.XMLtoPDF.model.SuccessResponse
import com.mtcn.androidroomkotlin.R
import com.mtcn.androidroomkotlin.databinding.FragmentHomeBinding
import com.mtcn.androidroomkotlin.ui.DrawOnBitmapActivity

class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        val root: View = binding.root
        init()
        return root
    }

    private fun init() {
        binding.btnDraw.setOnClickListener {
            val intent = Intent(context, DrawOnBitmapActivity::class.java)
            startActivity(intent)
        }
        binding.btnNewNote.setOnClickListener {
            CreatePdf(context)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    fun CreatePdf(context: Context?) {
        PdfGenerator.getBuilder()
            .setContext(context)
            .fromLayoutXMLSource()
            .fromLayoutXML(R.layout.cv_page_style1, R.layout.cv_page_style1) /* "fromLayoutXML()" takes array of layout resources.
                 * You can also invoke "fromLayoutXMLList()" method here which takes list of layout resources instead of array. */
            .setDefaultPageSize(PdfGenerator.PageSize.A4) /* It takes default page size like A4,A5. You can also set custom page size in pixel
                 * by calling ".setCustomPageSize(int widthInPX, int heightInPX)" here. */
            .setFileName("cv-PDF") /* It is file name */
            .setFolderName("CvFolder/") /* It is folder name. If you set the folder name like this pattern (FolderA/FolderB/FolderC), then
                 * FolderA creates first.Then FolderB inside FolderB and also FolderC inside the FolderB and finally
                 * the pdf file named "Test-PDF.pdf" will be store inside the FolderB. */
            .openPDFafterGeneration(true) /* It true then the generated pdf will be shown after generated. */
            .build(object : PdfGeneratorListener() {
                override fun onFailure(failureResponse: FailureResponse) {
                    super.onFailure(failureResponse)
                    /* If pdf is not generated by an error then you will findout the reason behind it
                         * from this FailureResponse. */
                }

                override fun showLog(log: String) {
                    super.showLog(log)
                    /*It shows logs of events inside the pdf generation process*/
                }

                override fun onSuccess(response: SuccessResponse) {
                    super.onSuccess(response)
                    /* If PDF is generated successfully then you will find SuccessResponse
                         * which holds the PdfDocument,File and path (where generated pdf is stored)*/
                }
            })
    }


}